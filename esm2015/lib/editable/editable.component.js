import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, EventEmitter, Inject, Input, Output, } from '@angular/core';
import { BehaviorSubject, fromEvent, Subject } from 'rxjs';
import { filter, skip, switchMap, take, takeUntil, withLatestFrom } from 'rxjs/operators';
import { ViewModeDirective } from '../directives/view-mode.directive';
import { EditModeDirective } from '../directives/edit-mode.directive';
import { EDITABLE_CONFIG } from './editable.config';
export class EditableComponent {
    constructor(el, config) {
        this.el = el;
        this.config = config;
        this.openOn = this.config.openOn;
        this.closeOn = this.config.closeOn;
        this.save = new EventEmitter();
        this.cancel = new EventEmitter();
        this.onStateChange = new EventEmitter();
        this.editMode = new BehaviorSubject(false);
        this.editMode$ = this.editMode.asObservable();
        this.destroy$ = new Subject();
        this.isGrouped = false;
    }
    get element() {
        return this.el.nativeElement;
    }
    ngOnInit() {
        this.handleViewMode();
        this.handleEditMode();
    }
    ngOnDestroy() {
        this.destroy$.next(true);
    }
    handleViewMode() {
        this.viewHandler = fromEvent(this.element, this.openOn)
            .pipe(withLatestFrom(this.editMode$), filter(([_, editMode]) => !editMode), takeUntil(this.destroy$))
            .subscribe(() => this.displayEditMode());
    }
    handleEditMode() {
        const clickOutside$ = (editMode) => fromEvent(document, this.closeOn).pipe(filter(() => editMode), 
        /*
        skip the first propagated event if there is a nested node in the viewMode templateRef
        so it doesn't trigger this eventListener when switching to editMode
         */
        skip(this.openOn === this.closeOn ? 1 : 0), filter(({ target }) => this.element.contains(target) === false), take(1));
        this.editHandler = this.editMode$
            .pipe(switchMap((editMode) => clickOutside$(editMode)), takeUntil(this.destroy$))
            .subscribe(() => this.saveEdit());
    }
    displayEditMode() {
        this.editMode.next(true);
        this.onStateChange.emit('edit');
    }
    saveEdit() {
        this.save.next();
        this.leaveEditMode();
    }
    cancelEdit() {
        this.cancel.next();
        this.leaveEditMode();
    }
    leaveEditMode() {
        this.editMode.next(false);
        this.onStateChange.emit('view');
        if (!this.isGrouped) {
            this.viewHandler.unsubscribe();
            setTimeout(() => this.handleViewMode(), 0);
        }
    }
}
EditableComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-inline-edit',
                template: `
    <ng-container *ngTemplateOutlet="(editMode$ | async) ? editModeTpl.tpl : viewModeTpl.tpl"></ng-container>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [':host {cursor: pointer;}']
            },] }
];
EditableComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [EDITABLE_CONFIG,] }] }
];
EditableComponent.propDecorators = {
    openOn: [{ type: Input }],
    closeOn: [{ type: Input }],
    save: [{ type: Output }],
    cancel: [{ type: Output }],
    onStateChange: [{ type: Output }],
    viewModeTpl: [{ type: ContentChild, args: [ViewModeDirective,] }],
    editModeTpl: [{ type: ContentChild, args: [EditModeDirective,] }]
};
//# sourceMappingURL=data:application/json;base64,